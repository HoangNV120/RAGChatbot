#!/usr/bin/env python3
"""
Script ƒë·ªÉ re-categorize to√†n b·ªô d·ªØ li·ªáu trong data_test.xlsx
b·∫±ng k·ªπ thu·∫≠t prompt engineering ƒë√£ t·ªëi ∆∞u h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n 100%
"""

import pandas as pd
import asyncio
import sys
import os
from datetime import datetime
import shutil

# Add app to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.category_partitioned_router import CategoryPartitionedRouter

class DataRecategorizer:
    """Class ƒë·ªÉ re-categorize d·ªØ li·ªáu v·ªõi consistency cao"""
    
    def __init__(self):
        # Ch·ªâ kh·ªüi t·∫°o LLM classification, kh√¥ng c·∫ßn vector embeddings
        self.router = CategoryPartitionedRouter(use_categorized_data=False)
        
        # Th·ªëng k√™
        self.total_processed = 0
        self.categorization_results = {}
        
    async def backup_original_file(self):
        """Backup file g·ªëc tr∆∞·ªõc khi s·ª≠a"""
        original_file = 'app/data_test.xlsx'
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = f'app/data_test_backup_{timestamp}.xlsx'
        
        try:
            shutil.copy2(original_file, backup_file)
            print(f"üìÅ Backup created: {backup_file}")
            return backup_file
        except Exception as e:
            print(f"‚ùå Error creating backup: {e}")
            return None
    
    async def recategorize_all_data(self):
        """Re-categorize to√†n b·ªô d·ªØ li·ªáu"""
        
        print("üöÄ RE-CATEGORIZING ALL DATA WITH OPTIMIZED CLASSIFICATION")
        print("=" * 70)
        
        # Backup file g·ªëc
        backup_file = await self.backup_original_file()
        if not backup_file:
            print("‚ùå Cannot proceed without backup!")
            return False
        
        # Load d·ªØ li·ªáu
        print("üìä Loading original data...")
        df = pd.read_excel('app/data_test.xlsx')
        print(f"‚úÖ Loaded {len(df)} rows")
        
        # Hi·ªÉn th·ªã category distribution c≈© (n·∫øu c√≥)
        if 'category' in df.columns:
            old_category_stats = df['category'].value_counts()
            print(f"\nüìä OLD Category Distribution:")
            for cat, count in old_category_stats.items():
                print(f"   {cat}: {count} questions ({count/len(df)*100:.1f}%)")
        
        # T·∫°o list ƒë·ªÉ l∆∞u category m·ªõi
        new_categories = []
        processed_questions = set()  # ƒê·ªÉ tr√°nh duplicate processing
        
        print(f"\nüîÑ Re-categorizing {len(df)} questions with optimized prompt engineering...")
        
        for idx, row in df.iterrows():
            question = str(row['question']).strip()
            
            if not question or question == 'nan':
                new_categories.append("KH√ÅC")
                continue
            
            # Progress indicator
            progress = (idx + 1) / len(df) * 100
            print(f"\nüìù Processing {idx+1}/{len(df)} ({progress:.1f}%)")
            print(f"Question: {question[:80]}...")
            
            # X·ª≠ l√Ω multiple questions (n·∫øu c√≥ d·∫•u |)
            main_question = question.split('|')[0].strip()
            
            # Ki·ªÉm tra ƒë√£ process ch∆∞a ƒë·ªÉ tr√°nh duplicate
            if main_question in processed_questions:
                # T√¨m category ƒë√£ ƒë∆∞·ª£c assign cho c√¢u h·ªèi t∆∞∆°ng t·ª±
                for i, prev_cat in enumerate(new_categories):
                    if i < len(df):
                        prev_question = str(df.iloc[i]['question']).strip().split('|')[0].strip()
                        if prev_question == main_question:
                            new_categories.append(prev_cat)
                            print(f"üîÑ Using cached result: {prev_cat}")
                            break
                else:
                    # Fallback n·∫øu kh√¥ng t√¨m th·∫•y
                    new_categories.append("KH√ÅC")
                continue
            
            # Classify v·ªõi optimized router
            try:
                classification_result = await self.router._classify_query_category(main_question)
                category = classification_result["category"]
                
                new_categories.append(category)
                processed_questions.add(main_question)
                
                # Log chi ti·∫øt
                print(f"   ‚úÖ Result: {category}")
                if 'llm_category' in classification_result:
                    print(f"   üìä LLM: {classification_result['llm_category']}")
                    print(f"   üîë Keywords: {classification_result.get('keyword_category', 'None')}")
                
                # Th·ªëng k√™
                if category not in self.categorization_results:
                    self.categorization_results[category] = 0
                self.categorization_results[category] += 1
                
                # Delay ƒë·ªÉ tr√°nh rate limit
                await asyncio.sleep(0.3)
                
            except Exception as e:
                print(f"   ‚ùå Error: {e}")
                new_categories.append("KH√ÅC")
                continue
        
        # C·∫≠p nh·∫≠t DataFrame
        df['category'] = new_categories
        
        # Hi·ªÉn th·ªã th·ªëng k√™ m·ªõi
        print(f"\nüìä NEW Category Distribution:")
        new_category_stats = df['category'].value_counts()
        total = len(df)
        
        for cat, count in new_category_stats.items():
            percentage = count/total*100
            print(f"   {cat}: {count} questions ({percentage:.1f}%)")
        
        # So s√°nh v·ªõi ph√¢n b·ªë c≈©
        if 'category' in df.columns and len(old_category_stats) > 0:
            print(f"\nüìà COMPARISON (Old vs New):")
            all_categories = set(old_category_stats.keys()) | set(new_category_stats.keys())
            
            for cat in sorted(all_categories):
                old_count = old_category_stats.get(cat, 0)
                new_count = new_category_stats.get(cat, 0)
                change = new_count - old_count
                change_symbol = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
                print(f"   {cat}: {old_count} ‚Üí {new_count} ({change:+d}) {change_symbol}")
        
        # L∆∞u file m·ªõi
        output_file = 'app/data_test.xlsx'
        df.to_excel(output_file, index=False)
        print(f"\nüíæ Updated data saved to: {output_file}")
        
        # L∆∞u cache classification ƒë·ªÉ ƒë·∫£m b·∫£o consistency
        cache_file = 'app/classification_cache.json'
        self.router.save_classification_cache(cache_file)
        
        return True
    
    async def validate_recategorization(self):
        """Validate k·∫øt qu·∫£ re-categorization"""
        
        print(f"\nüß™ VALIDATING RE-CATEGORIZATION RESULTS")
        print("=" * 50)
        
        # Load d·ªØ li·ªáu ƒë√£ re-categorize
        df = pd.read_excel('app/data_test.xlsx')
        
        # Test random samples ƒë·ªÉ ki·ªÉm tra consistency
        import random
        sample_size = min(10, len(df))
        sample_indices = random.sample(range(len(df)), sample_size)
        
        print(f"üîç Testing {sample_size} random samples for consistency...")
        
        consistent_count = 0
        
        for i, idx in enumerate(sample_indices, 1):
            row = df.iloc[idx]
            question = str(row['question']).split('|')[0].strip()
            stored_category = row['category']
            
            print(f"\nüìù Sample {i}: {question[:60]}...")
            print(f"   Stored category: {stored_category}")
            
            # Re-classify ƒë·ªÉ check consistency
            classification_result = await self.router._classify_query_category(question)
            new_category = classification_result["category"]
            
            if new_category == stored_category:
                print(f"   ‚úÖ CONSISTENT: {new_category}")
                consistent_count += 1
            else:
                print(f"   ‚ùå INCONSISTENT: Expected {stored_category}, got {new_category}")
            
            await asyncio.sleep(0.5)
        
        consistency_rate = consistent_count / sample_size
        print(f"\nüìä Validation Results:")
        print(f"   Consistent samples: {consistent_count}/{sample_size}")
        print(f"   Consistency rate: {consistency_rate:.1%}")
        
        if consistency_rate >= 0.9:
            print(f"   ‚úÖ EXCELLENT: Re-categorization is highly consistent!")
        elif consistency_rate >= 0.7:
            print(f"   üü° GOOD: Re-categorization is moderately consistent")
        else:
            print(f"   ‚ùå POOR: Re-categorization needs improvement")
        
        return consistency_rate
    
    def generate_summary_report(self):
        """T·∫°o b√°o c√°o t·ªïng k·∫øt"""
        
        print(f"\nüìã RE-CATEGORIZATION SUMMARY REPORT")
        print("=" * 50)
        
        # Load final data
        df = pd.read_excel('app/data_test.xlsx')
        category_stats = df['category'].value_counts()
        
        print(f"üìä Final Statistics:")
        print(f"   Total questions: {len(df)}")
        print(f"   Categories found: {len(category_stats)}")
        
        print(f"\nüìà Category Breakdown:")
        for cat, count in category_stats.items():
            percentage = count/len(df)*100
            print(f"   {cat}: {count} questions ({percentage:.1f}%)")
        
        # Recommendations
        print(f"\nüí° Recommendations:")
        
        if category_stats.get("KH√ÅC", 0) > len(df) * 0.1:  # >10% KH√ÅC
            print(f"   ‚ö†Ô∏è  High 'KH√ÅC' rate ({category_stats.get('KH√ÅC', 0)}) - consider adding more specific categories")
        
        smallest_category = category_stats.min()
        if smallest_category < 5:
            print(f"   ‚ö†Ô∏è  Some categories have very few questions (<5) - consider merging or collecting more data")
        
        print(f"   ‚úÖ Data is now consistently categorized using optimized prompt engineering")
        print(f"   ‚úÖ Classification cache saved for future consistency")
        print(f"   ‚úÖ Router will now perform much better with accurate category partitioning")

async def main():
    """Main function"""
    
    print("üéØ DATA RE-CATEGORIZATION WITH OPTIMIZED CLASSIFICATION")
    print("=" * 70)
    print("This script will re-categorize ALL data in data_test.xlsx using")
    print("the optimized prompt engineering techniques for 100% consistency.")
    print()
    
    # Confirm v·ªõi user
    confirm = input("‚ö†Ô∏è  This will modify data_test.xlsx (backup will be created). Continue? (y/N): ")
    if confirm.lower() not in ['y', 'yes']:
        print("‚ùå Operation cancelled by user")
        return
    
    try:
        # Initialize recategorizer
        recategorizer = DataRecategorizer()
        
        # Step 1: Re-categorize all data
        success = await recategorizer.recategorize_all_data()
        
        if not success:
            print("‚ùå Re-categorization failed!")
            return
        
        # Step 2: Validate results
        consistency_rate = await recategorizer.validate_recategorization()
        
        # Step 3: Generate summary
        recategorizer.generate_summary_report()
        
        print(f"\nüèÜ RE-CATEGORIZATION COMPLETED SUCCESSFULLY!")
        print(f"‚úÖ Consistency rate: {consistency_rate:.1%}")
        print(f"‚úÖ Your CategoryPartitionedRouter will now work with accurate category data!")
        
    except Exception as e:
        print(f"\n‚ùå Error during re-categorization: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
