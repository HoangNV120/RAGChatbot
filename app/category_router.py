from typing import Dict, Optional, List
import logging
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
from app.config import settings
import pandas as pd
import asyncio

logger = logging.getLogger(__name__)

class CategoryRouter:
    def __init__(self):
        self.llm = ChatOpenAI(
            model=settings.model_name,
            temperature=0.1,
            api_key=settings.openai_api_key
        )
        
        # Load data ƒë·ªÉ t·∫°o categories
        self.data = pd.read_excel('app/data_test.xlsx')
        
        # ƒê·ªãnh nghƒ©a c√°c categories ch√≠nh d·ª±a tr√™n ph√¢n t√≠ch d·ªØ li·ªáu
        self.categories = {
            "NG√ÄNH_H·ªåC": {
                "description": "C√¢u h·ªèi v·ªÅ c√°c ng√†nh h·ªçc, ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, m√¥n h·ªçc t·∫°i FPT",
                "keywords": ["ng√†nh", "ch∆∞∆°ng tr√¨nh", "ƒë√†o t·∫°o", "m√¥n h·ªçc", "khoa", "chuy√™n ng√†nh"]
            },
            "QUY_CHE_THI": {
                "description": "C√¢u h·ªèi v·ªÅ quy ch·∫ø thi, n·ªôi quy ph√≤ng thi, vi ph·∫°m khi thi",
                "keywords": ["thi", "ph√≤ng thi", "quy ch·∫ø", "vi ph·∫°m", "k·ª∑ lu·∫≠t", "n·ªôi quy"]
            },
            "ƒêI·ªÇM_S·ªê_H·ªåC_T·∫¨P": {
                "description": "C√¢u h·ªèi v·ªÅ ƒëi·ªÉm s·ªë, h·ªçc t·∫≠p, ƒë√°nh gi√°, thang ƒëi·ªÉm",
                "keywords": ["ƒëi·ªÉm", "h·ªçc t·∫≠p", "ƒë√°nh gi√°", "thang ƒëi·ªÉm", "k·∫øt qu·∫£"]
            },
            "H·ªåC_PH√ç_T√ÄI_CH√çNH": {
                "description": "C√¢u h·ªèi v·ªÅ h·ªçc ph√≠, t√†i ch√≠nh, chi ph√≠, h·ªçc b·ªïng",
                "keywords": ["h·ªçc ph√≠", "ti·ªÅn", "chi ph√≠", "h·ªçc b·ªïng", "t√†i ch√≠nh"]
            },
            "SINH_VI√äN_D·ªäCH_V·ª§": {
                "description": "C√¢u h·ªèi v·ªÅ c√°c d·ªãch v·ª• sinh vi√™n, h·ªó tr·ª£, th·ªß t·ª•c h√†nh ch√≠nh",
                "keywords": ["sinh vi√™n", "d·ªãch v·ª•", "h·ªó tr·ª£", "th·ªß t·ª•c", "ƒëƒÉng k√Ω"]
            },
            "C∆†_S·ªû_V·∫¨T_CH·∫§T": {
                "description": "C√¢u h·ªèi v·ªÅ c∆° s·ªü v·∫≠t ch·∫•t, ph√≤ng h·ªçc, trang thi·∫øt b·ªã",
                "keywords": ["ph√≤ng", "t√≤a", "c∆° s·ªü", "thi·∫øt b·ªã", "ƒë·ªãa ƒëi·ªÉm"]
            },
            "KH√ÅC": {
                "description": "C√°c c√¢u h·ªèi kh√°c kh√¥ng thu·ªôc c√°c category tr√™n",
                "keywords": []
            }
        }
        
        # Category classification prompt
        self.category_prompt = """B·∫°n l√† m·ªôt chuy√™n gia ph√¢n lo·∫°i c√¢u h·ªèi c·ªßa sinh vi√™n FPT.

D·ª±a tr√™n c√¢u h·ªèi ƒë∆∞·ª£c cung c·∫•p, h√£y x√°c ƒë·ªãnh category ph√π h·ª£p nh·∫•t t·ª´ c√°c category sau:

1. NG√ÄNH_H·ªåC: C√¢u h·ªèi v·ªÅ c√°c ng√†nh h·ªçc, ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, m√¥n h·ªçc t·∫°i FPT
2. QUY_CHE_THI: C√¢u h·ªèi v·ªÅ quy ch·∫ø thi, n·ªôi quy ph√≤ng thi, vi ph·∫°m khi thi  
3. ƒêI·ªÇM_S·ªê_H·ªåC_T·∫¨P: C√¢u h·ªèi v·ªÅ ƒëi·ªÉm s·ªë, h·ªçc t·∫≠p, ƒë√°nh gi√°, thang ƒëi·ªÉm
4. H·ªåC_PH√ç_T√ÄI_CH√çNH: C√¢u h·ªèi v·ªÅ h·ªçc ph√≠, t√†i ch√≠nh, chi ph√≠, h·ªçc b·ªïng
5. SINH_VI√äN_D·ªäCH_V·ª§: C√¢u h·ªèi v·ªÅ c√°c d·ªãch v·ª• sinh vi√™n, h·ªó tr·ª£, th·ªß t·ª•c h√†nh ch√≠nh
6. C∆†_S·ªû_V·∫¨T_CH·∫§T: C√¢u h·ªèi v·ªÅ c∆° s·ªü v·∫≠t ch·∫•t, ph√≤ng h·ªçc, trang thi·∫øt b·ªã
7. KH√ÅC: C√°c c√¢u h·ªèi kh√°c kh√¥ng thu·ªôc c√°c category tr√™n

C√¢u h·ªèi: "{query}"

Ch·ªâ tr·∫£ v·ªÅ t√™n category (v√≠ d·ª•: NG√ÄNH_H·ªåC), kh√¥ng gi·∫£i th√≠ch th√™m."""

        # T·∫°o mapping question -> category cho database
        self.question_categories = self._create_question_categories()
        
    def _create_question_categories(self) -> Dict[str, str]:
        """T·∫°o mapping question -> category cho database"""
        mapping = {}
        
        for idx, row in self.data.iterrows():
            question = str(row['question']).lower()
            
            # Rule-based categorization d·ª±a tr√™n keywords
            category = "KH√ÅC"  # default
            
            if any(keyword in question for keyword in ["ng√†nh", "ch∆∞∆°ng tr√¨nh", "ƒë√†o t·∫°o", "m√¥n h·ªçc", "khoa"]):
                category = "NG√ÄNH_H·ªåC"
            elif any(keyword in question for keyword in ["thi", "ph√≤ng thi", "quy ch·∫ø", "vi ph·∫°m", "k·ª∑ lu·∫≠t"]):
                category = "QUY_CHE_THI"
            elif any(keyword in question for keyword in ["ƒëi·ªÉm", "h·ªçc t·∫≠p", "ƒë√°nh gi√°", "thang ƒëi·ªÉm"]):
                category = "ƒêI·ªÇM_S·ªê_H·ªåC_T·∫¨P"
            elif any(keyword in question for keyword in ["h·ªçc ph√≠", "ti·ªÅn", "chi ph√≠", "h·ªçc b·ªïng"]):
                category = "H·ªåC_PH√ç_T√ÄI_CH√çNH"
            elif any(keyword in question for keyword in ["sinh vi√™n", "d·ªãch v·ª•", "h·ªó tr·ª£", "th·ªß t·ª•c", "ƒëƒÉng k√Ω"]):
                category = "SINH_VI√äN_D·ªäCH_V·ª§"
            elif any(keyword in question for keyword in ["ph√≤ng", "t√≤a", "c∆° s·ªü", "thi·∫øt b·ªã", "ƒë·ªãa ƒëi·ªÉm"]):
                category = "C∆†_S·ªû_V·∫¨T_CH·∫§T"
                
            mapping[question] = category
            
        return mapping
    
    async def classify_query_category(self, query: str) -> str:
        """S·ª≠ d·ª•ng LLM ƒë·ªÉ ph√¢n lo·∫°i category c·ªßa c√¢u h·ªèi"""
        try:
            prompt = self.category_prompt.format(query=query)
            response = await self.llm.ainvoke([HumanMessage(content=prompt)])
            
            category = response.content.strip().upper()
            
            # Validate category
            if category in self.categories:
                return category
            else:
                logger.warning(f"Invalid category returned: {category}, defaulting to KH√ÅC")
                return "KH√ÅC"
                
        except Exception as e:
            logger.error(f"Error in category classification: {e}")
            return "KH√ÅC"
    
    def get_questions_by_category(self, category: str) -> List[Dict]:
        """L·∫•y t·∫•t c·∫£ c√¢u h·ªèi thu·ªôc m·ªôt category"""
        questions = []
        
        for idx, row in self.data.iterrows():
            question_lower = str(row['question']).lower()
            if self.question_categories.get(question_lower, "KH√ÅC") == category:
                questions.append({
                    "question": row['question'],
                    "answer": row['answer'],
                    "source": row.get('ngu·ªìn', ''),
                    "index": idx
                })
                
        return questions
    
    async def find_best_match_in_category(self, query: str, category: str) -> Optional[Dict]:
        """T√¨m c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t trong m·ªôt category"""
        
        # L·∫•y t·∫•t c·∫£ c√¢u h·ªèi trong category
        category_questions = self.get_questions_by_category(category)
        
        if not category_questions:
            return None
            
        # S·ª≠ d·ª•ng LLM ƒë·ªÉ t√¨m c√¢u h·ªèi t∆∞∆°ng t·ª± nh·∫•t
        find_match_prompt = f"""B·∫°n l√† m·ªôt chuy√™n gia t√¨m ki·∫øm c√¢u h·ªèi t∆∞∆°ng t·ª±.

C√¢u h·ªèi c·∫ßn t√¨m: "{query}"

Danh s√°ch c√¢u h·ªèi trong category {category}:
"""
        
        for i, q in enumerate(category_questions[:10]):  # Gi·ªõi h·∫°n 10 c√¢u ƒë·ªÉ tr√°nh prompt qu√° d√†i
            find_match_prompt += f"{i+1}. {q['question']}\n"
            
        find_match_prompt += f"""
H√£y ch·ªçn c√¢u h·ªèi t∆∞∆°ng t·ª± nh·∫•t v·ªõi c√¢u h·ªèi c·∫ßn t√¨m.
Ch·ªâ tr·∫£ v·ªÅ s·ªë th·ª© t·ª± (v√≠ d·ª•: 3), kh√¥ng gi·∫£i th√≠ch th√™m.
N·∫øu kh√¥ng c√≥ c√¢u n√†o t∆∞∆°ng t·ª±, tr·∫£ v·ªÅ 0.
"""
        
        try:
            response = await self.llm.ainvoke([HumanMessage(content=find_match_prompt)])
            match_index = int(response.content.strip())
            
            if 1 <= match_index <= len(category_questions[:10]):
                return category_questions[match_index - 1]
            else:
                return None
                
        except Exception as e:
            logger.error(f"Error finding match in category: {e}")
            return None
    
    async def route_query(self, query: str) -> Dict:
        """Main routing function"""
        try:
            # B∆∞·ªõc 1: Classify category
            category = await self.classify_query_category(query)
            
            logger.info(f"Query classified as category: {category}")
            print(f"üîç Category detected: {category}")
            
            # B∆∞·ªõc 2: N·∫øu category l√† KH√ÅC, t·ª± ƒë·ªông ƒëi RAG_CHAT
            if category == "KH√ÅC":
                print(f"‚ö° Category is KH√ÅC, automatically routing to RAG_CHAT")
                return {
                    "route": "RAG_CHAT",
                    "category": category,
                    "reason": "Category classified as KH√ÅC - using RAG for better response",
                    "query": query  # Original query
                }
            
            # B∆∞·ªõc 3: T√¨m match trong category c·ª• th·ªÉ
            match = await self.find_best_match_in_category(query, category)
            
            if match:
                print(f"‚úÖ Found match in category {category}")
                return {
                    "route": "CATEGORY_BASED",
                    "category": category,
                    "matched_question": match['question'],
                    "answer": match['answer'],
                    "source": match['source'],
                    "query": query  # Original query
                }
            
            # B∆∞·ªõc 4: N·∫øu kh√¥ng t√¨m th·∫•y trong category, fallback to RAG
            print(f"‚ùå No match found in category {category}, falling back to RAG")
            return {
                "route": "RAG_CHAT",
                "category": category,
                "reason": f"No suitable match found in category {category}",
                "query": query  # Original query
            }
            
        except Exception as e:
            logger.error(f"Error in category routing: {e}")
            return {
                "route": "RAG_CHAT",
                "category": "ERROR",
                "reason": f"Error during routing: {str(e)}",
                "query": query
            }
    
    def get_category_stats(self) -> Dict:
        """Th·ªëng k√™ categories"""
        stats = {}
        total_questions = len(self.data)
        
        for category in self.categories.keys():
            count = sum(1 for cat in self.question_categories.values() if cat == category)
            stats[category] = {
                "count": count,
                "percentage": (count / total_questions) * 100
            }
            
        return stats
