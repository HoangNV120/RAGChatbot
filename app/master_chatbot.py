from typing import Dict, Optional
import logging

from app.category_router import CategoryRouter
from app.rag_chat import RAGChat  # K√çCH HO·∫†T L·∫†I
# from app.rule_based_chatbot import AdvancedChatbot  # T·∫ÆT T·∫†M TH·ªúI
from app.safety_guard import SafetyGuard
from app.config import settings

# Lo·∫°i b·ªè basicConfig ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi main.py
logger = logging.getLogger(__name__)

class MasterChatbot:
    def __init__(self, vector_store=None):
        """
        Kh·ªüi t·∫°o Master Chatbot
        """
        # Kh·ªüi t·∫°o safety guard - ki·ªÉm tra ƒë·∫ßu ti√™n
        self.safety_guard = SafetyGuard()

        # Kh·ªüi t·∫°o category router - thay th·∫ø smart router
        self.router = CategoryRouter()

        # K√çCH HO·∫†T L·∫†I RAG Chat ƒë·ªÉ x·ª≠ l√Ω category KH√ÅC
        self.rag_chat = RAGChat(vector_store=vector_store)

        # T·∫ÆT T·∫†M TH·ªúI Rule-based chatbot
        # self.rule_based_chatbot = AdvancedChatbot()

    async def generate_response(self, query: str, session_id: Optional[str] = None) -> Dict:
        """
        Ph∆∞∆°ng th·ª©c ch√≠nh ƒë·ªÉ x·ª≠ l√Ω query
        """
        try:
            # B∆∞·ªõc 1: Ki·ªÉm tra t√≠nh an to√†n c·ªßa query
            # safety_result = await self.safety_guard.check_safety(query)
            #
            # if not safety_result["is_safe"]:
            #     logger.warning(f"Unsafe query detected: {query}")
            #     return {
            #         "output": safety_result["reason"],
            #         "session_id": session_id or "safety-blocked-session",
            #         "route_used": "SAFETY_BLOCKED"
            #     }

            # B∆∞·ªõc 2: ƒê·ªãnh tuy·∫øn query (ch·ªâ khi an to√†n)
            routing_result = await self.router.route_query(query)
            route = routing_result["route"]

            # Log routing information
            logger.info(f"Category routing result: {routing_result}")
            print(f"Query routed to: {route}")
            print(f"Category: {routing_result.get('category', 'N/A')}")
            if route == "CATEGORY_BASED":
                print(f"Matched question: {routing_result.get('matched_question', 'N/A')}")

            if route == "CATEGORY_BASED":
                # Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi tr·ª±c ti·∫øp t·ª´ database theo category
                return {
                    "output": routing_result["answer"],
                    "session_id": session_id or "category-based-session",
                    "route_used": "CATEGORY_BASED",
                    "routing_info": routing_result
                }
            elif route == "RAG_CHAT":
                # S·ª≠ d·ª•ng RAG chat cho category KH√ÅC ho·∫∑c kh√¥ng t√¨m th·∫•y match
                query_to_use = routing_result["query"]  # C√¢u h·ªèi g·ªëc
                result = await self.rag_chat.generate_response(query_to_use, session_id)
                result["route_used"] = "RAG_CHAT"
                result["routing_info"] = routing_result
                return result
            else:
                # Fallback case
                return {
                    "output": "ü§ñ Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ nh∆∞: ng√†nh h·ªçc, quy ch·∫ø thi, ƒëi·ªÉm s·ªë, h·ªçc ph√≠, d·ªãch v·ª• sinh vi√™n, ho·∫∑c c∆° s·ªü v·∫≠t ch·∫•t.",
                    "session_id": session_id or "fallback-session",
                    "route_used": "FALLBACK",
                    "routing_info": routing_result
                }

        except Exception as e:
            logger.error(f"Error in master chatbot: {e}")
            return {
                "output": "ü§ñ Xin l·ªói, c√≥ l·ªói x·∫£y ra. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau.",
                "session_id": session_id or "error-session",
                "route_used": "ERROR"
            }
